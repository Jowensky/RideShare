"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request-promise-native");
const DriverEta_1 = require("./endpoints/DriverEta");
const NearbyDrivers_1 = require("./endpoints/NearbyDrivers");
const RideEstimates_1 = require("./endpoints/RideEstimates");
const RideTypes_1 = require("./endpoints/RideTypes");
class Lyft {
    constructor(clientId, clientSecret) {
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.tokenType = '';
        this.accessToken = '';
        this.expirationDate = 0;
    }
    getRideTypes(input) {
        return this.execute(RideTypes_1.rideTypes, input);
    }
    getDriverEta(input) {
        return this.execute(DriverEta_1.driverEta, input);
    }
    getRideEstimates(input) {
        return this.execute(RideEstimates_1.rideEstimates, input);
    }
    getNearbyDrivers(input) {
        return this.execute(NearbyDrivers_1.nearbyDrivers, input);
    }
    execute(endpoint, input) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = endpoint.convertInput(input);
            const options = yield this.buildOptions(endpoint.name, params);
            const output = yield request(options);
            return endpoint.convertOutput(output);
        });
    }
    getAccessToken() {
        return request({
            uri: 'https://api.lyft.com/oauth/token',
            method: 'POST',
            auth: {
                username: this.clientId,
                password: this.clientSecret,
            },
            headers: {
                'Content-Type': 'application/json',
            },
            body: {
                grant_type: 'client_credentials',
            },
            json: true,
            timeout: 5000,
        }).then((result) => {
            this.tokenType = result.token_type;
            this.accessToken = result.access_token;
            this.expirationDate = Date.now() + result.expires_in * 1000;
            return result;
        });
    }
    requiresTokenRefresh() {
        const nowDate = Date.now();
        return (!this.tokenType ||
            !this.accessToken ||
            !this.expirationDate ||
            nowDate > this.expirationDate);
    }
    buildOptions(subpath, parameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.requiresTokenRefresh()) {
                yield this.getAccessToken();
            }
            return {
                uri: `https://api.lyft.com/v1/${subpath}`,
                qs: parameters,
                headers: {
                    Authorization: `${this.tokenType} ${this.accessToken}`,
                },
                json: true,
                timeout: 10000,
            };
        });
    }
}
exports.Lyft = Lyft;
//# sourceMappingURL=Lyft.js.map