"use strict";
'use es6';
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = require("immutable");
const CoordinateBuilder_1 = require("../../data/builders/CoordinateBuilder");
const DriverEtaSearch_1 = require("../DriverEtaSearch");
class DriverEtaSearchBuilder {
    static build(json) {
        let args = immutable_1.Map();
        if (!('start' in json)) {
            throw new TypeError('start is not in the search');
        }
        let startCoordinate = CoordinateBuilder_1.default.build(json['start']);
        args = args.set('startCoordinate', startCoordinate);
        if ('end' in json) {
            let endCoordinate = CoordinateBuilder_1.default.build(json['end']);
            args = args.set('endCoordinate', endCoordinate);
        }
        if ('rideType' in json) {
            let rideType = DriverEtaSearchBuilder.validateRideType(json['rideType']);
            args = args.set('rideType', rideType);
        }
        return new DriverEtaSearch_1.default(args);
    }
    static validateRideType(rideType) {
        if (!Object.prototype.toString.call(rideType) === '[object String]') {
            throw new TypeError('rideType is not a string');
        }
        const rideTypes = [
            'lyft',
            'lyft_line',
            'lyft_plus',
        ];
        if (rideTypes.indexOf(rideType) === -1) {
            throw new RangeError('rideType must be either \'lyft\', \'lyft_line\', or \'lyft_plus\'');
        }
        return rideType;
    }
}
exports.default = DriverEtaSearchBuilder;
//# sourceMappingURL=DriverEtaSearchBuilder.js.map