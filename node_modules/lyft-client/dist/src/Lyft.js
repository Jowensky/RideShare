"use strict";
'use es6';
Object.defineProperty(exports, "__esModule", { value: true });
const request_promise_1 = require("request-promise");
const Subpath_1 = require("./data/Subpath");
const RideTypesSearchBuilder_1 = require("./search/builders/RideTypesSearchBuilder");
const DriverEtaSearchBuilder_1 = require("./search/builders/DriverEtaSearchBuilder");
const RideEstimatesSearchBuilder_1 = require("./search/builders/RideEstimatesSearchBuilder");
const NearbyDriversSearchBuilder_1 = require("./search/builders/NearbyDriversSearchBuilder");
class Lyft {
    constructor(clientId, clientSecret) {
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.tokenType;
        this.accessToken;
        this.expiresIn;
        this.scope;
        this.expirationDate;
    }
    getAccessToken() {
        return request_promise_1.default({
            method: 'POST',
            uri: 'https://api.lyft.com/oauth/token',
            auth: {
                username: this.clientId,
                password: this.clientSecret,
            },
            headers: {
                'Content-Type': 'application/json',
            },
            body: {
                grant_type: 'client_credentials',
            },
            json: true,
            timeout: 5000,
        })
            .then(result => {
            this.tokenType = result.token_type;
            this.accessToken = result.access_token;
            this.expiresIn = result.expires_in;
            this.scope = result.scope;
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            this.expirationDate = tomorrow;
            return result;
        })
            .catch(function (err) {
            throw new Error(err);
        });
    }
    getRideTypes(search) {
        return this.execute(Subpath_1.default.RIDE_TYPES, RideTypesSearchBuilder_1.default.build(search).toParameters().toJS());
    }
    getDriverEta(search) {
        return this.execute(Subpath_1.default.DRIVER_ETA, DriverEtaSearchBuilder_1.default.build(search).toParameters().toJS());
    }
    getRideEstimates(search) {
        return this.execute(Subpath_1.default.RIDE_ESTIMATES, RideEstimatesSearchBuilder_1.default.build(search).toParameters().toJS());
    }
    getNearbyDrivers(search) {
        return this.execute(Subpath_1.default.NEARBY_DRIVERS, NearbyDriversSearchBuilder_1.default.build(search).toParameters().toJS());
    }
    async execute(subpath, parameters) {
        const options = await this.buildOptions(subpath, parameters);
        return request_promise_1.default(options)
            .then(result => result)
            .catch(function (err) {
            throw new Error(err);
        });
    }
    async buildOptions(subpath, parameters) {
        const nowDate = new Date();
        if (!this.tokenType || !this.accessToken || !this.expirationDate || nowDate > this.expirationDate) {
            await this.getAccessToken();
        }
        return {
            uri: `https://api.lyft.com/v1/${subpath.value}`,
            qs: parameters,
            headers: {
                Authorization: `${this.tokenType} ${this.accessToken}`,
            },
            json: true,
            timeout: 5000,
        };
    }
}
exports.default = Lyft;
//# sourceMappingURL=Lyft.js.map